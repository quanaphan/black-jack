#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('black-jack:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Socket.IO on server
 */
var io = require('socket.io')(server);

/**
 * Socket logics
 */
// config + init
var game_sessions = {};
var player_sessions = {};
//need a player list of sort here
var cards = require('../utilities/cards');
var database = require('../database/db.js');
const max_session_capacity = 3;
var session_capacity = 4;
const cap_increment = 4;
const lobby = io.of('/lobby');
const game = io.of('/game');
const login = io.of('/login');
const account = io.of('/account');
/**
 * Utitlities for game_sessions
 */
/**
 * Populate game session from start to end
 */
var populate_game_sessions = function(start,end){
  for(i = start; i <= end; i++){
    var key = i;
    game_sessions[key] = {};
    game_sessions[key]['host'] = "";
    game_sessions[key]['title'] = "";
    game_sessions[key]['players'] = {};
    game_sessions[key]['active'] = false;
    game_sessions[key]['capacity'] = 0;
    game_sessions[key]['id'] = key;
  }
}

/**
 * Reset session
 */
var reset_session = function(key){
    game_sessions[key]['host'] = "";
    game_sessions[key]['title'] = "";
    game_sessions[key]['players'] = {};
    game_sessions[key]['active'] = false;
    game_sessions[key]['capacity'] = 0;
}

/**
 * Get next avail game session
 */
var avail_session = function(){
  for (var i = 1; i <= session_capacity; i++) {
    if(!game_sessions[i]['active']){
      //if game session is avail, return the session key/id
      return i;
    }
  }
  //fail to find an available session, all session busy
  //creating new session
  populate_game_sessions(session_capacity+1,session_capacity + cap_increment);
  var id = session_capacity+1;
  session_capacity += cap_increment;
  return id;
}

/**
 * Create a game session
 */
var create_session = function(id, title, username){
  game_sessions[id]['host'] = username;
  game_sessions[id]['title'] = title;
  game_sessions[id]['player'][username] = {};
  game_sessions[id]['player'][username]['username'] = username;
  game_sessions[id]['active'] = true;
  game_sessions[id]['capacity'] = 1;
  game_sessions[id]['deck'] = Object.clone(cards);
}

/**
 * shuffle deck of given game session
 */
var shuffle_deck = function(id){
  game_sessions[id]['deck'] = shuffle(game_sessions[id]['deck']);
}    

/**
 * Utitlities for player_sessions
 */
/**
 * Create a new user under requested name
 * return true on success, return false on failure
 */
var load_user = function(key){
  player_sessions[key] = {};
  database.getUserNickname(key, function(result){
    player_sessions[key]['nickname'] = result;
  });// load nickname from DB
  player_sessions[key]['balance'] = 
  database.getUserBalance(key, function(result){
    player_sessions[key]['balance'] = result;
  });// load from DB
  player_sessions[key]['username'] = key;
}

var update_nick = function(key, nickname){
  database.setUserNickname(key, nickname);
  player_sessions[key]['nickname'] =  nickname;
}

var update_balance = function(key, balance){
  database.setUserBalance(key, balance);
  player_sessions[key]['balance'] = balance;
}

//init game session, starts from 1
populate_game_sessions(1, session_capacity);

/**
 * Login socket logics
 */
login.on('connection', function(socket){
  console.log(socket.id + 'connected')
  // if has cookies
  if(socket.handshake.headers.cookie == undefined){
    console.log('cookies detected. checking cookies');
    var socket_cookie = cookie.parse(socket.handshake.headers.cookie);
    console.log(socket_cookie);
    if(socket_cookie){
      if (socket_cookie['authorized']) {
        //add to player list & redirect
        load_user(socket_cookie['username']) = {};
        // redirect to lobby
        socket.emit('login success');
      }
    }
  }

  socket.on('login', function(username, password){
    var validate = database.validateUser;
    var result;
    validate(username, password, function(result){
      console.log('result = ' + result);
      if (result){
        // success, load user from DB and emit success msg
        load_user(username);
        console.log('login success');
        socket.emit('login success');
      } else{
        // failed, emit failure msg
        console.log('login failure');
        socket.emit('login failure');
      }
    })
  })
})

/**
 * Lobby socket logics
 */
lobby.on('connection', function(socket){
  //should have credentials
  var username = '';
  if(socket.handshake.headers.cookie){
    console.log('cookies detected. checking cookies');
    var socket_cookie = cookie.parse(socket.handshake.headers.cookie);
    console.log(socket_cookie);
    if(socket_cookie){
      if (socket_cookie['authorized']) {
        username = socket_cookie['username'];
      }else{
        //redirect back to login
      }
    }else{
      //redirect back to login
    }
  }else{
    //redirect back to login
  }

  //TODO get nickname here

  console.log('connected');
  var connected_session = -1;
  //send out game lobby list
  socket.emit('lobby update', JSON.stringify(game_sessions));
  //need leaderboard stuffs here

  //requesting a lobby list refresh
  socket.on('refresh', function(){
    socket.emit('lobby update', JSON.stringify(game_sessions));
  })

  //request to create a room
  socket.on('create room', function(title){
    var id = avail_session();
    //Fill metadata
    create_session(id,title,username);
    // send ack, refresh lobby list
    socket.emit('create success', id);
    lobby.emit('lobby update', JSON.stringify(game_sessions));
  })

  //requesting to join a room
  socket.on('join room', function(id){
    //check if room is not full
    if(game_sessions[id]['capacity'] != max_session_capacity){
      //increase capacity
      game_sessions[id]['capacity'] += 1;
      var p = "p" + game_sessions[id]['capacity'];
      game_sessions[id]['player'][p] = username;
      //send ack, refresh lobby list
      socket.emit('join success', id)
      lobby.emit('lobby update', JSON.stringify(game_sessions));
    }else{
      //room is full
      socket.emit('join fail');
    }
  })

  socket.on('leave room', function(){
    // do something
  })

  socket.on('disconenct', function(){
    // do something
    console.log('disconnect');
  })
})

function dealPlayerCard(session, username){
  session['player'][username]['hand'].push(session['deck'].pop());
}
function dealDealerCard(session){}


/**
 * Game session logic
 */
game.on('connection', function(socket){
  var username = '';
  var sessionID = -1;
  if(socket.handshake.headers.cookie){
    console.log('cookies detected. checking cookies');
    var socket_cookie =  cookie.parse(socket.handshake.headers.cookie);
    console.log(socket_cookie);
    if(socket_cookie){
      if (socket_cookie['authorized']) {
        username = socket_cookie['username'];
        sessionID = socket_cookie['sessionID'];
      }else{
        //redirect back to login
      }
    }else{
      //redirect back to login
    }
  }else{
    //redirect back to login
  }
  // TODO - get nickname here
  // Shuffle, x3 in total since 3 players expected
  shuffle_deck(sessionID);
  var session = game_sessions[sessionID];
  var channelname = "#" + sessionID;
  // join game channel for broadcast
  socket.join(channelname);
  
  /**
   * Gameflow:
   * Deck shuffled
   * Place bet & ready
   * distribute cards
   * p1 turn
   * p2 turn
   * p3 turn
   * dealer turn
   */


  // ready to start
  socket.on('ready', function(betAmount){
    game.to(channelname).emit('lock in', username);
    session['player'][username]['bet'] = betAmount;
  });

  socket.on('card distribution request', function(){
    if(username === session['host']){//only the host can request
      dealPlayerCard(session, username);
    }
  })



})


io.on('connection', function(socket){
  // On new socket connection
  socket.on('disconenct', function(){

  })
})








/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);



/**
 * Generate random alphanumeric
 */
function randomString(length){
  var text = "";
  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (var i = 0; i < length; i++) 
    text += possible.charAt(Math.floor(Math.random()*possible.length));
  return text;
}

/** Fisher-Yates shuffle algorithm
 * Shuffles array in place.
 * @param {Array} a items An array containing the items.
 */
function shuffle(a) {
    var j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
